Description: fix build on ppc64
 A build of recent DPDK 19.08 on all Ubuntu architectures gave us:
 ../drivers/net/mlx4/mlx4_rxtx.c: In function ‘mlx4_tx_burst’:
 ../drivers/net/mlx4/mlx4_rxtx.c:919:14: error: incompatible types when
   initializing type ‘__vector __bool int’ {aka ‘__vector(4) __bool int’}
   using type ‘int’
   919 |   bool tso = txq->priv->tso && (buf->ol_flags & PKT_TX_TCP_SEG);
       |              ^~~
 ../drivers/net/mlx4/mlx4_rxtx.c:938:7: error: used vector type where scalar
   is required
   938 |   if (tso) {
       |       ^~~
 .
 Which to an awful amount reminds me of the sad caps lock story [1] with 18.08.
 Back then the fix was [2] and a discussion around "at least" having build to
 work a prereq to be a supported architecture.
 This fix is based on [2] and does the same for mlx4.
 [1]: https://mails.dpdk.org/archives/dev/2018-August/110472.html
 [2]: https://git.dpdk.org/dpdk/commit/?id=725f5dd0bfb50192a2d2341d4cc69084c2c4e03d
Forwarded: yes (http://mails.dpdk.org/archives/dev/2019-August/140987.html)
Author: Christian Ehrhardt <christian.ehrhardt@canonical.com>
Last-Update: 2019-08-13
--- a/drivers/net/mlx4/mlx4_utils.h
+++ b/drivers/net/mlx4/mlx4_utils.h
@@ -15,6 +15,16 @@
 
 #include "mlx4.h"
 
+/*
+ * Compilation workaround for PPC64 when AltiVec is fully enabled, e.g. std=c11.
+ * Otherwise there would be a type conflict between stdbool and altivec.
+ */
+#if defined(__PPC64__) && !defined(__APPLE_ALTIVEC__)
+#undef bool
+/* redefine as in stdbool.h */
+#define bool _Bool
+#endif
+
 extern int mlx4_logtype;
 
 #ifndef NDEBUG
